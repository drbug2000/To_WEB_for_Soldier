1) parameter 값을 줄때 ''
if(document.querySelector('#nightmode_togle').value=='day'){
							document.querySelector('body').style.backgroundColor='white';
							document.querySelector('body').style.color = 'black';
			   				document.querySelector('#nightmode_togle').value='night';
						}else{
			   				document.querySelector('body').style.backgroundColor='black';
			    			document.querySelector('body').style.color = 'white';
			   				document.querySelector('#nightmode_togle').value='day';
						}
			   ">
			   
			   
-------------------------------------------------------------------------
document.querySelector('#nightmode_togle')
에도 ' ' 안줬다고 안돌아감

조심하자



2) Java script는 기본적으로 call-by-value(ex 원시형)
	일단 함수로 원본 값을 바꿀순없음 return해야함
	대신  return으로 숫자 뿐만 아니라, 문자열, 배열도 그냥 가능


3) javascrt 코드를 HTML에서 실행할때 순서 주의
	HTML문서도 위에서 아래로 읽는다
	중간에 JS코드가 있으면 순서대로 실행한다
	밑에있는 것은 로드가 되지 않은 채로 말이다
	따라서 HTML과 코드의 순서도 신경쓰면서 코딩해야한다
	
4) for문 안에 비동기 함수가 들어있는 경우
	비동기 : 순서대로 실행되지 않는 것
	=> 문제가 발생하니 클로져를 배우기전까지는 사용 X
	
	ex) setTimeout(function 콜백함수(){
	
	},1000)
	-> 이런건 for에 넣으면 오류남
	
5) 다른 것은 HTML과 JS에서 용어가 일치하지만, class는 JS에서 className
	그리고 text-right => textRigt 이렇게 바꿔 써줘야함
	
6)서로 다른 소스파일의 함수가 서로에게 작동....
	실수로 test.js에 show()함수를 만들었는데, main.js의 배열에 show가 작동함.. 깜짝놀람

7)rand가 난수이기는 하지만, 암호학적 완전한 난수는 아니다. 
	보안관련 코딩시에는 암호학적으로 완벽한 난수를 찾아 사용하시길
	
8)없는 배열 index접근도 undefind erorr를 띄울 수 있다
	크롬 컴파일러는 error를 타고타고 진짜 erorr가 발생한 코드를 짚어준다
	다시한번 그부분을 생각해보시길
	
9)JS 파일의 이름을 잘정하자
	연결해놓은 HTML파일 이름 다 바꿔야함...
	연결에러, 404등은 그런 오류일 수 있음
	
10)CSS HTML 구문 주의
	matrix[1][1].backgroundColor => 그냥 조용히 undefined출력
	matrix[1][1].style.backgroundColor => .style 때문에 그런거.. .이런 중간자(?) 주의 
	
11)//cell.addEventListner('contextmenu',Fclick);
	오타 하나때문에 ㅜㅠㅜㅠ이게 뭐고ㅜㅠㅠㅜㅜ
	
12) .target VS .currentTarget
	.currentTarget : 이벤트리스너가 달린 대상을 리턴
	.target : 실제 이벤트가 발생한 대상을 리턴
	
	ex) tbody.addEventListener(~~~, function(e)~~)
		e.target => <td></td>
		e.currentTarget => <tbody></tbody>
		
	-> 더 이해하자면 이벤트 버블링, 캡쳐링 을 알아야함
	진짜 리스너가 달린 대상이냐, 그 자식 요소이냐...정도로 이해
	
13) 클로저 문제 (바인딩)
	바인딩 예제
	https://codingcoding.tistory.com/1054 
	
	렉시컬 환경과 클로저
	https://velog.io/@goatyeonje/JavaScript-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD%EA%B3%BC-%ED%81%B4%EB%A1%9C%EC%A0%80
	
14) .click
	-> 해당 객체(요소)에 클릭 이벤트가 나타난 것처럼 작동

15) .forEach(e) 
	e배열 요소에 대한 반복문
	
16) = something || ''
	something이 거짓인 값이면 ''을 쓰고 그렇지 않으면 ''을 써라
	거짓인 값 : false , 0 , '' , undefined, NaN, null
	
	**=> ? 왜? ||의 결과는 당연히 boolan 아님? 왜?
	
17) dictionary	
	var dictionary = { key:dic,key: dic,}
	dictionary.key === dic
	이렇게 데이터를 정리 해서 사용가능
	
18)start_button[0].addEventListener('click', function()
	document.getElementsByClassName으로 가져온 개체는 배열이다
	변수에 저장해서 콘솔로 출력해도 잘되더니 addEventListener붙이니까 그냥 .addEventListener is not a function띄워버리네...
	
19)CSS background-position
	왼쪽 위가 원점
	원점으로부터 박스쪽이 + 
	원점으로부터 바깥쪽이 -
	
			--방향(으로 이미지를 당김)	
			  \
			   \
	ex)			원점------------
				|\
				| \
				|	++방향(으로 이미지를 당김)
				
20)그냥 그림판으로 그림 건들면 노이즈 생김....

21)//gameboard[i][j].style.backgroundPosition='0px -50px';
	JS 코드로 CSS를 조작하면 class로 조작이 꼬임
	JS코드가 우선순위가 있나봄
	=> 할꺼면 하나로 하는게 좋을듯. 직접속성 조정/class로 조정
	
	
22)배열 reduce함수
	https://hianna.tistory.com/408
	
23)settimeout함수 (공식문서?)
	https://developer.mozilla.org/ko/docs/Web/API/setTimeout
	
24) CSS 기본적으로 상속이 안되는 속성들이 있음...(background 같은거)
   상속시키려면 inherit 속성을 지정해줘야 상속함
	
	
25)git revert/reset 사용법
	https://www.lainyzine.com/ko/article/git-revert-reverting-commit-in-git-repository/
	reset은 로컬저장소에서 진짜 지워버리는거, revert는 커밋을 남기고 되돌리는거
	꼭 바로 전 꺼만 안해도 된다 옛날 중간꺼도 가능(역 연산을 함)
	
	
26) classList
	https://developer.mozilla.org/ko/docs/Web/API/Element/classList
	css class를 js에서 다루기
	지금까지 내가 아는 유일한 기술....
	가장 안전하고, 간결하게 CSS를 다루는 방법..
	
27) 자손/형제 태그 선택
	https://itun.tistory.com/501
	
	
28) CSS중앙정렬
	https://velog.io/@hsecode/CSS-%EC%88%98%EC%A7%81-%EC%A4%91%EC%95%99-%EC%A0%95%EB%A0%AC
	
	
29) JS의 반복문 (for_of, for_in, .forEach() )
	
	-for_of
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of
	
	-for_in
	https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...in
	
	-.forEach
	https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
	

30)*****call by ~~~




31)객체 생성 (factory , prototype , new)
	객체 something = { 변수 , 함수 }
	이때 객체에 공통되는 내용들을 넣어야할때
	1) factory pattern
	
	function object(a,b,c) {
		return {
		var 어찌구 = a;
		var 어찌구 = b;
		function ~~
		}
	}
	
	var Object = object(A,B,C)
	
	2)prototype
	
	자바스크립트에는 객체 안에 "prototype"이라는 객체를 포함 시키면, 이중 참조를 하지 않아도 prototype객체안의 요소를 참조 할 수 있다
	ex)in Chrome, __proto__라는 객체를 사용
	var Prototype = { a:1, b:2, c:3 }
	Card.__proto__ = Prototype 
	=> Card.__proto__.a === Card.a 둘다 요소 접근 가능
	
	But __proto_는 비표준
	
	So
	var Prototype = { a:1, b:2, c:3 }
	var Card == Dbject.crete(Prototype)
	이렇게하면 Card.a로 요소 접근 가능
	
	3)생성자 
	function Card(name, att, hp){
	this.name = name;
	this.att = att;
	this.hp = hp;
	}
	
	var c1 = new Card("first", 5, 6)
	=> 객체 생성
	
	this 연산자는 new가 있어야만 객체를 뜻함
	new가 없다면 그냥 window객체를 의미 -> window에 요소를 추가하는 함수가 되어버림